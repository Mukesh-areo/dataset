import pdfkit
from bs4 import BeautifulSoup

# Assuming 'parsed_html' is the parsed HTML content using BeautifulSoup
parsed_html = BeautifulSoup(html_content, 'html.parser')

# Save the parsed HTML content to a file
with open('parsed_html.html', 'w', encoding='utf-8') as file:
    file.write(parsed_html.prettify())

# Convert the saved HTML file to PDF
pdfkit.from_file('parsed_html.html', 'output.pdf')



from bs4 import BeautifulSoup
from weasyprint import HTML

# Assuming 'parsed_html' is the parsed HTML content using BeautifulSoup
parsed_html = BeautifulSoup(html_content, 'html.parser')

# Save the parsed HTML content to a file
with open('parsed_html.html', 'w', encoding='utf-8') as file:
    file.write(parsed_html.prettify())

# Convert the saved HTML file to PDF
HTML('parsed_html.html').write_pdf('output.pdf')





from bs4 import BeautifulSoup
from weasyprint import HTML, CSS

# Assuming 'parsed_html' is the parsed HTML content using BeautifulSoup
parsed_html = BeautifulSoup(html_content, 'html.parser')

# Save the parsed HTML content to a file
with open('parsed_html.html', 'w', encoding='utf-8') as file:
    file.write(parsed_html.prettify())

# Define the CSS stylesheet for the footer
css = """
@page {
    @bottom-center {
        content: "Page " counter(page);
    }
}
"""

# Convert the saved HTML file to PDF with the footer
HTML('parsed_html.html').write_pdf('output.pdf', stylesheets=[CSS(string=css)])






from bs4 import BeautifulSoup
from weasyprint import HTML, CSS

# Assuming 'parsed_html' is the parsed HTML content using BeautifulSoup
parsed_html = BeautifulSoup(html_content, 'html.parser')

# Save the parsed HTML content to a file
with open('parsed_html.html', 'w', encoding='utf-8') as file:
    file.write(parsed_html.prettify())

# Define the CSS stylesheet for the footer with the image
css = """
@page {
    @bottom-center {
        content: "Page " counter(page);
    }
    margin-bottom: 50px;
}
.footer {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    text-align: center;
    padding: 10px;
}
"""

# Convert the saved HTML file to PDF with the footer and logo image
HTML('parsed_html.html').write_pdf('output.pdf', stylesheets=[CSS(string=css)], presentational_hints=True)









from PyPDF2 import PdfFileReader, PdfFileWriter
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.lib.units import inch

# Path to the input PDF file
input_pdf_path = 'input.pdf'

# Path to the output PDF file
output_pdf_path = 'output.pdf'

# Logo image path
logo_path = 'logo.png'

# Function to create header content
def create_header(c, pdf_title):
    c.saveState()
    c.setStrokeColorRGB(0, 0, 0)
    c.setLineWidth(0.5)
    c.setFont("Helvetica", 10)
    c.drawString(inch, letter[1]-0.75*inch, pdf_title)
    c.drawImage(logo_path, 0.5*inch, letter[1]-0.5*inch, width=1*inch, height=0.5*inch)
    c.restoreState()

# Function to create footer content
def create_footer(c, page_num):
    c.saveState()
    c.setStrokeColorRGB(0, 0, 0)
    c.setLineWidth(0.5)
    c.setFont("Helvetica", 8)
    c.drawString(inch, 0.75*inch, f"Page {page_num}")
    c.drawImage(logo_path, 0.5*inch, 0.5*inch, width=1*inch, height=0.5*inch)
    c.restoreState()

# Create a PDF writer object
output_pdf = PdfFileWriter()

# Read the input PDF file
input_pdf = PdfFileReader(open(input_pdf_path, "rb"))

# Iterate through each page of the input PDF
for page_num in range(input_pdf.getNumPages()):
    # Create a new PDF canvas
    packet = io.BytesIO()
    can = canvas.Canvas(packet, pagesize=letter)
    
    # Get the PDF page
    page = input_pdf.getPage(page_num)
    
    # Create the header
    create_header(can, "Header Title")
    
    # Create the footer
    create_footer(can, page_num+1)
    
    # Close the canvas
    can.save()
    
    # Move to the beginning of the StringIO buffer
    packet.seek(0)
    new_pdf = PdfFileReader(packet)
    
    # Merge the PDF page and the new header/footer
    page.merge_page(new_pdf.getPage(0))
    
    # Add the merged page to the output PDF
    output_pdf.addPage(page)

# Write the output PDF to a file
with open(output_pdf_path, "wb") as output_file:
    output_pdf.write(output_file)









import fitz

# Path to the input PDF file
input_pdf_path = 'input.pdf'

# Path to the output PDF file
output_pdf_path = 'output.pdf'

# Logo image path
logo_path = 'logo.png'

# Function to add header and footer to a page
def add_header_and_footer(page, header_text, logo_path, footer_text):
    # Get the page size
    page_width = page.rect.width
    page_height = page.rect.height
    
    # Add header
    header_height = 40  # Adjust as needed
    page.insert_text((page_width / 2, page_height - 20), header_text, fontsize=12, align=1)
    
    # Add footer
    footer_height = 40  # Adjust as needed
    page.insert_text((page_width / 2, footer_height), footer_text, fontsize=10, align=1)
    
    # Add logo
    logo = fitz.Pixmap(logo_path)
    logo_width, logo_height = logo.width, logo.height
    logo_scale = min(page_width / logo_width, header_height / logo_height)
    page.insert_image((page_width - logo_width * logo_scale) / 2, page_height - header_height + (header_height - logo_height * logo_scale) / 2, pixmap=logo, scale=logo_scale)
    logo.clear()

# Open the input PDF file
pdf_document = fitz.open(input_pdf_path)

# Iterate through each page of the input PDF
for page_num in range(pdf_document.page_count):
    # Get the page
    page = pdf_document.load_page(page_num)
    
    # Add header and footer to the page
    add_header_and_footer(page, "Header Text", logo_path, f"Page {page_num + 1}")
    
# Save the modified PDF to a new file
pdf_document.save(output_pdf_path)

# Close the PDF document
pdf_document.close()
